#include <stdio.h>
#include <stdlib.h>
#include <CL/cl.h>

#define MAX_SOURCE_SIZE (0x10000)

int main() {
    // 1. Load the kernel source code
    FILE *fp;
    const char fileName[] = "kernel.cl"; // Update this with your kernel file
    size_t source_size;
    char *source_str;

    fp = fopen(fileName, "r");
    if (!fp) {
        fprintf(stderr, "Failed to load kernel.\n");
        exit(1);
    }
    source_str = (char*)malloc(MAX_SOURCE_SIZE);
    source_size = fread(source_str, 1, MAX_SOURCE_SIZE, fp);
    fclose(fp);

    // 2. Get platform/device information
    cl_platform_id platform_id = NULL;
    cl_device_id device_id = NULL;   
    cl_uint ret_num_devices, ret_num_platforms;
    cl_int ret = clGetPlatformIDs(1, &platform_id, &ret_num_platforms);
    ret = clGetDeviceIDs(platform_id, CL_DEVICE_TYPE_GPU, 1, &device_id, &ret_num_devices);

    // 3. Create OpenCL context
    cl_context context = clCreateContext(NULL, 1, &device_id, NULL, NULL, &ret);

    // 4. Create command queue
    cl_command_queue command_queue = clCreateCommandQueue(context, device_id, 0, &ret);

    // 5. Create memory buffers based on your kernel needs
    // Example: For vector addition
    int N = 1024;
    int *A = (int*)malloc(sizeof(int) * N);
    int *B = (int*)malloc(sizeof(int) * N);
    int *C = (int*)malloc(sizeof(int) * N);

    for (int i = 0; i < N; i++) {
        A[i] = i;
        B[i] = i;
    }

    cl_mem a_mem = clCreateBuffer(context, CL_MEM_READ_ONLY, N * sizeof(int), NULL, &ret);
    cl_mem b_mem = clCreateBuffer(context, CL_MEM_READ_ONLY, N * sizeof(int), NULL, &ret);
    cl_mem c_mem = clCreateBuffer(context, CL_MEM_WRITE_ONLY, N * sizeof(int), NULL, &ret);

    ret = clEnqueueWriteBuffer(command_queue, a_mem, CL_TRUE, 0, N * sizeof(int), A, 0, NULL, NULL);
    ret = clEnqueueWriteBuffer(command_queue, b_mem, CL_TRUE, 0, N * sizeof(int), B, 0, NULL, NULL);

    // 6. Create program from source
    cl_program program = clCreateProgramWithSource(context, 1, (const char **)&source_str, 
                        (const size_t *)&source_size, &ret);

    // 7. Build the program
    ret = clBuildProgram(program, 1, &device_id, NULL, NULL, NULL);

    // 8. Create OpenCL kernel
    cl_kernel kernel = clCreateKernel(program, "vecadd", &ret); // Replace "vecadd" with your kernel name

    // 9. Set kernel arguments
    ret = clSetKernelArg(kernel, 0, sizeof(cl_mem), (void *)&a_mem);
    ret = clSetKernelArg(kernel, 1, sizeof(cl_mem), (void *)&b_mem);
    ret = clSetKernelArg(kernel, 2, sizeof(cl_mem), (void *)&c_mem);

    // 10. Execute the kernel
    size_t global_item_size = N;
    size_t local_item_size = 64; // Or NULL for default
    ret = clEnqueueNDRangeKernel(command_queue, kernel, 1, NULL, 
                                 &global_item_size, &local_item_size, 0, NULL, NULL);

    // 11. Read result back
    ret = clEnqueueReadBuffer(command_queue, c_mem, CL_TRUE, 0, 
                              N * sizeof(int), C, 0, NULL, NULL);

    // Print result (optional)
    for (int i = 0; i < 10; i++)
        printf("%d + %d = %d\n", A[i], B[i], C[i]);

    // 12. Clean up
    ret = clFlush(command_queue);
    ret = clFinish(command_queue);
    ret = clReleaseKernel(kernel);
    ret = clReleaseProgram(program);
    ret = clReleaseMemObject(a_mem);
    ret = clReleaseMemObject(b_mem);
    ret = clReleaseMemObject(c_mem);
    ret = clReleaseCommandQueue(command_queue);
    ret = clReleaseContext(context);
    free(A); free(B); free(C); free(source_str);

    return 0;
}









ðŸ§© How to Use This for Different Kernel Types
You just need to:

Replace kernel.cl with your kernel file (e.g., reverse_string.cl, matrix_rotate.cl, etc.)
Replace "vecadd" with your kernel name (e.g., "reverse", "matrixMult", "pyramid", etc.)
Set the arguments (clSetKernelArg) as needed based on kernel inputs.
Change buffer types (e.g., char* for strings, float* for matrix, etc.)
